/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ru.prbb.activeagent;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Enumeration;
import java.util.List;
import java.util.Properties;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JEditorPane;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.WindowConstants;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

import ru.prbb.activeagent.services.TaskChecker;
import ru.prbb.activeagent.services.SubscriptionChecker;

/**
 *
 * @author bryhljaev
 */
public class MainJFrame extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;

    public static final String IS_DEBUG_INFO = "ActiveAgent.isDebugInfo";

    private final Logger logger = Logger.getLogger(getClass().getName());

    private final DefaultListModel<SubscriptionChecker> subscription = new DefaultListModel<>();
    private final DefaultListModel<TaskChecker> jobber = new DefaultListModel<>();
    private final PlainDocument resultDoc = new PlainDocument();

    private final File propertiesFile;
    private final Properties properties = new Properties();

    /**
     * Creates new form MainJFrame
     */
    public MainJFrame() {
    	propertiesFile = new File("ActiveAgent.properties");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JPanel jPanelNorth = new JPanel();
        JPanel jPanel1 = new JPanel();
        JPanel jPanel1n = new JPanel();
        JButton subscriptionAdd = new JButton();
        JButton subscriptionDel = new JButton();
        Box.Filler filler1 = new Box.Filler(new Dimension(10, 0), new Dimension(10, 0), new Dimension(10, 32767));
        JButton subscriptionStart = new JButton();
        JButton subscriptionStop = new JButton();
        JScrollPane jScrollPaneSubscription = new JScrollPane();
        subscriptionList = new JList();
        JPanel jPanel2 = new JPanel();
        JPanel jPanel2n = new JPanel();
        JButton jobberAdd = new JButton();
        JButton jobberDel = new JButton();
        Box.Filler filler2 = new Box.Filler(new Dimension(10, 0), new Dimension(10, 0), new Dimension(10, 32767));
        JButton jobberStart = new JButton();
        JButton jobberStop = new JButton();
        JScrollPane jScrollPaneJobber = new JScrollPane();
        jobberList = new JList();
        JPanel jPanelCenter = new JPanel();
        JPanel jPanel3n = new JPanel();
        JButton resultClean = new JButton();
        Box.Filler filler3 = new Box.Filler(new Dimension(20, 0), new Dimension(20, 0), new Dimension(32767, 0));
        resultAutoscroll = new JCheckBox();
        Box.Filler filler4 = new Box.Filler(new Dimension(20, 0), new Dimension(20, 0), new Dimension(32767, 0));
        isDebugInfo = new JCheckBox();
        JScrollPane jScrollPane1 = new JScrollPane();
        result = new JEditorPane();

        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Агент Bloomberg");
        setMinimumSize(new Dimension(500, 300));
        setPreferredSize(new Dimension(700, 526));
        addWindowListener(new WindowAdapter() {
            public void windowOpened(WindowEvent evt) {
                formWindowOpened(evt);
            }
            public void windowClosing(WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanelNorth.setLayout(new BoxLayout(jPanelNorth, BoxLayout.PAGE_AXIS));

        jPanel1.setLayout(new BorderLayout());

        jPanel1n.setLayout(new FlowLayout(FlowLayout.LEADING));

        subscriptionAdd.setText("Добавить");
        subscriptionAdd.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                subscriptionAddActionPerformed(evt);
            }
        });
        jPanel1n.add(subscriptionAdd);

        subscriptionDel.setText("Убрать");
        subscriptionDel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                subscriptionDelActionPerformed(evt);
            }
        });
        jPanel1n.add(subscriptionDel);
        jPanel1n.add(filler1);

        subscriptionStart.setText("Старт");
        subscriptionStart.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                subscriptionStartActionPerformed(evt);
            }
        });
        jPanel1n.add(subscriptionStart);

        subscriptionStop.setText("Стоп");
        subscriptionStop.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                subscriptionStopActionPerformed(evt);
            }
        });
        jPanel1n.add(subscriptionStop);

        jPanel1.add(jPanel1n, BorderLayout.PAGE_START);

        subscriptionList.setModel(subscription);
        subscriptionList.setVisibleRowCount(4);
        jScrollPaneSubscription.setViewportView(subscriptionList);

        jPanel1.add(jScrollPaneSubscription, BorderLayout.CENTER);

        jPanelNorth.add(jPanel1);

        jPanel2.setLayout(new BorderLayout());

        jPanel2n.setLayout(new FlowLayout(FlowLayout.LEADING));

        jobberAdd.setText("Добавить");
        jobberAdd.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jobberAddActionPerformed(evt);
            }
        });
        jPanel2n.add(jobberAdd);

        jobberDel.setText("Убрать");
        jobberDel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jobberDelActionPerformed(evt);
            }
        });
        jPanel2n.add(jobberDel);
        jPanel2n.add(filler2);

        jobberStart.setText("Старт");
        jobberStart.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jobberStartActionPerformed(evt);
            }
        });
        jPanel2n.add(jobberStart);

        jobberStop.setText("Стоп");
        jobberStop.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jobberStopActionPerformed(evt);
            }
        });
        jPanel2n.add(jobberStop);

        jPanel2.add(jPanel2n, BorderLayout.PAGE_START);

        jobberList.setModel(jobber);
        jobberList.setVisibleRowCount(10);
        jScrollPaneJobber.setViewportView(jobberList);

        jPanel2.add(jScrollPaneJobber, BorderLayout.CENTER);

        jPanelNorth.add(jPanel2);

        getContentPane().add(jPanelNorth, BorderLayout.PAGE_START);

        jPanelCenter.setPreferredSize(new Dimension(500, 200));
        jPanelCenter.setLayout(new BorderLayout());

        jPanel3n.setLayout(new FlowLayout(FlowLayout.LEADING));

        resultClean.setText("Очистить");
        resultClean.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                resultCleanActionPerformed(evt);
            }
        });
        jPanel3n.add(resultClean);
        jPanel3n.add(filler3);

        resultAutoscroll.setSelected(true);
        resultAutoscroll.setText("Следить за сообщениями");
        jPanel3n.add(resultAutoscroll);
        jPanel3n.add(filler4);

        isDebugInfo.setText("Подробные сообщения");
        isDebugInfo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                isDebugInfoActionPerformed(evt);
            }
        });
        jPanel3n.add(isDebugInfo);

        jPanelCenter.add(jPanel3n, BorderLayout.PAGE_START);

        result.setEditable(false);
        result.setDocument(resultDoc
        );
        jScrollPane1.setViewportView(result);

        jPanelCenter.add(jScrollPane1, BorderLayout.CENTER);

        getContentPane().add(jPanelCenter, BorderLayout.CENTER);

        setSize(new Dimension(810, 830));
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        Logger.getLogger("").addHandler(new Handler() {
            private int count = 0;

            {
                setFormatter(new SimpleFormatter());
            }

            @Override
            public void publish(LogRecord record) {
                try {
                    if (++count > 999) {
                        resultCleanActionPerformed(null);
                        count = 0;
                    }

                    String str = getFormatter().format(record);

                    resultDoc.insertString(resultDoc.getLength(), str + '\n', null);

                    if (resultAutoscroll.isSelected()) {
                        result.setCaretPosition(resultDoc.getLength());
                    }
                } catch (BadLocationException ex) {
                    reportError("BadLocationException", ex, 0);
                }
            }

            @Override
            public void flush() {
            }

            @Override
            public void close() {
            }
        });

		try {
			if (propertiesFile.canRead()) {
				properties.loadFromXML(new FileInputStream(propertiesFile));
			}
		} catch (IOException ex) {
            logger.log(Level.SEVERE, "Load properties from " + propertiesFile, ex);
		}

        /*
        String hostMy = "172.23.153.164:8080";
        addTaskChecker(hostMy);
        addSubscriptionChecker(hostMy);
        */

        String hostWork = "192.168.100.101:8080";
        addTaskChecker(hostWork);
        addSubscriptionChecker(hostWork);

        String hostTest = "192.168.101.101:8080";
        addTaskChecker(hostTest);
        addSubscriptionChecker(hostTest);

        for (int i = 0; i < subscription.getSize(); i++) {
            SubscriptionChecker item = subscription.get(i);
            String property = "subscription." + item.getUri();
			if (properties.containsKey(property)) {
				item.start();
			}
        }

        for (int i = 0; i < jobber.getSize(); i++) {
            TaskChecker item = jobber.get(i);
            String property = "jobber." + item.getUri();
			if (properties.containsKey(property)) {
				item.start();
			}
        }
    }//GEN-LAST:event_formWindowOpened

    private void subscriptionAddActionPerformed(ActionEvent evt) {//GEN-FIRST:event_subscriptionAddActionPerformed
        try {
            String host = JOptionPane.showInputDialog("Адрес сервера для подписки", "localhost:8080");
            if (host != null)
                addSubscriptionChecker(host);
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_subscriptionAddActionPerformed

    private void subscriptionDelActionPerformed(ActionEvent evt) {//GEN-FIRST:event_subscriptionDelActionPerformed
        try {
            List<SubscriptionChecker> list = subscriptionList.getSelectedValuesList();
            for (SubscriptionChecker item : list) {
                item.stop();
                subscription.removeElement(item);
                String property = "subscription." + item.getUri();
                setProperty(property, false);
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_subscriptionDelActionPerformed

    private void subscriptionStartActionPerformed(ActionEvent evt) {//GEN-FIRST:event_subscriptionStartActionPerformed
        try {
            if (subscriptionList.isSelectionEmpty()) {
                if (showYesNoDialog("Запустить все подписки?")) {
                    Enumeration<SubscriptionChecker> items = subscription.elements();
                    while (items.hasMoreElements()) {
                        SubscriptionChecker item = items.nextElement();
                        item.start();
                        String property = "subscription." + item.getUri();
                        setProperty(property, true);
                    }
                }
            } else {
                List<SubscriptionChecker> list = subscriptionList.getSelectedValuesList();
                for (SubscriptionChecker item : list) {
                    item.start();
                    String property = "subscription." + item.getUri();
                    setProperty(property, true);
                }
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
        }
        subscriptionList.clearSelection();
    }//GEN-LAST:event_subscriptionStartActionPerformed

    private void subscriptionStopActionPerformed(ActionEvent evt) {//GEN-FIRST:event_subscriptionStopActionPerformed
        try {
            if (subscriptionList.isSelectionEmpty()) {
                Enumeration<SubscriptionChecker> items = subscription.elements();
                while (items.hasMoreElements()) {
                    SubscriptionChecker item = items.nextElement();
                    item.stop();
                    String property = "subscription." + item.getUri();
                    setProperty(property, false);
                }
            } else {
                List<SubscriptionChecker> list = subscriptionList.getSelectedValuesList();
                for (SubscriptionChecker item : list) {
                    item.stop();
                    String property = "subscription." + item.getUri();
                    setProperty(property, false);
                }
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
        }
        subscriptionList.clearSelection();
    }//GEN-LAST:event_subscriptionStopActionPerformed

    private void jobberAddActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jobberAddActionPerformed
        try {
            String host = JOptionPane.showInputDialog("Адрес сервера для заданий", "localhost:8080");
            if (host != null)
                addTaskChecker(host);
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jobberAddActionPerformed

    private void jobberDelActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jobberDelActionPerformed
        try {
            List<TaskChecker> list = jobberList.getSelectedValuesList();
            for (TaskChecker item : list) {
                item.stop();
                jobber.removeElement(item);
                String property = "jobber." + item.getUri();
                setProperty(property, false);
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jobberDelActionPerformed

    private void jobberStartActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jobberStartActionPerformed
        try {
            if (jobberList.isSelectionEmpty()) {
                if (showYesNoDialog("Запустить все Jobber?")) {
                    Enumeration<TaskChecker> items = jobber.elements();
                    while (items.hasMoreElements()) {
                        TaskChecker item = items.nextElement();
                        item.start();
                        String property = "jobber." + item.getUri();
                        setProperty(property, true);
                    }
                }
            } else {
                List<TaskChecker> list = jobberList.getSelectedValuesList();
                for (TaskChecker item : list) {
                    item.start();
                    String property = "jobber." + item.getUri();
                    setProperty(property, true);
                }
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
        }
        jobberList.clearSelection();
    }//GEN-LAST:event_jobberStartActionPerformed

    private void jobberStopActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jobberStopActionPerformed
        try {
            if (jobberList.isSelectionEmpty()) {
                Enumeration<TaskChecker> items = jobber.elements();
                while (items.hasMoreElements()) {
                    TaskChecker item = items.nextElement();
                    item.stop();
                    String property = "jobber." + item.getUri();
                    setProperty(property, false);
                }
            } else {
                List<TaskChecker> list = jobberList.getSelectedValuesList();
                for (TaskChecker item : list) {
                    item.stop();
                    String property = "jobber." + item.getUri();
                    setProperty(property, false);
                }
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
        }
        jobberList.clearSelection();
    }//GEN-LAST:event_jobberStopActionPerformed

	private void resultCleanActionPerformed(ActionEvent evt) {//GEN-FIRST:event_resultCleanActionPerformed
        try {
            resultDoc.remove(0, resultDoc.getLength());
        } catch (BadLocationException ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_resultCleanActionPerformed

    private void formWindowClosing(WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (showYesNoDialog("Остановить Агента?")) {
            setDefaultCloseOperation(EXIT_ON_CLOSE);
        }
    }//GEN-LAST:event_formWindowClosing

    private void isDebugInfoActionPerformed(ActionEvent evt) {//GEN-FIRST:event_isDebugInfoActionPerformed
        System.setProperty(IS_DEBUG_INFO, String.valueOf(isDebugInfo.isSelected()));
    }//GEN-LAST:event_isDebugInfoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(MainJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JCheckBox isDebugInfo;
    private JList jobberList;
    private JEditorPane result;
    private JCheckBox resultAutoscroll;
    private JList subscriptionList;
    // End of variables declaration//GEN-END:variables

    private boolean showYesNoDialog(String message) {
        int r = JOptionPane.showOptionDialog(rootPane, message, getTitle(), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
        return (r == JOptionPane.YES_OPTION);
    }

    private void setProperty(String property, boolean value) {
		if (value) {
			properties.setProperty(property, "работает");
		} else {
			properties.remove(property);
		}
		try {
			properties.storeToXML(new FileOutputStream(propertiesFile), "Запущенные задания");
		} catch (IOException ex) {
            logger.log(Level.SEVERE, "Store properties to " + propertiesFile, ex);
		}
	}

    private void addTaskChecker(String host) {
        try {
            jobber.addElement(new TaskChecker(host, "/analytics"));
            jobber.addElement(new TaskChecker(host, "/Jobber"));
            jobber.addElement(new TaskChecker(host, "/middleoffice"));
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }

    private void addSubscriptionChecker(String host) {
        try {
            subscription.addElement(new SubscriptionChecker(host));
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
        }
    }
}
